<?xml version="1.0"?>

<launch>
  <arg name="name" default="quadrotor"/>
  <arg name="model" default="$(find hector_quadrotor_description)/urdf/quadrotor_slave.gazebo.xacro"/>
  <arg name="controllers" default="
    controller/position
    controller/velocity
    controller/attitude
    "/>
  <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>

  <arg name="x" default="10.0"/>
  <arg name="y" default="10.0"/>
  <arg name="z" default="64.3"/>

  <arg name="R" default="0.0"/>
  <arg name="P" default="0.0"/>
  <arg name="Y" default="0.0"/>

  <arg name="use_ground_truth_for_tf" default="true" />
  <arg name="use_ground_truth_for_control" default="true" />
  <arg name="use_pose_estimation" if="$(arg use_ground_truth_for_control)" default="false"/>
  <arg name="use_pose_estimation" unless="$(arg use_ground_truth_for_control)" default="true"/>

  <arg name="world_frame" default="world"/> <!-- This should actually be "/world". See https://github.com/ros-simulation/gazebo_ros_pkgs/pull/324 -->
  <arg name="base_link_frame" default="$(arg tf_prefix)/base_link"/>

  <!-- send the robot XML to param server -->
  <param name="robot_description_slave" command="$(find xacro)/xacro '$(arg model)' base_link_frame:=$(arg base_link_frame) world_frame:=$(arg world_frame)" />
  <param name="tf_prefix" type="string" value="$(arg tf_prefix)"/> <!-- required for hector_pose_estimation and message_to_tf -->
  <param name="base_link_frame" type="string" value="$(arg base_link_frame)" />
  <param name="base_stabilized_frame" type="string" value="$(arg tf_prefix)/base_stabilized" />
  <param name="base_footprint_frame" type="string" value="$(arg tf_prefix)/base_footprint" />
  <param name="world_frame" type="string" value="$(arg world_frame)" />

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_robot_slave_01" pkg="gazebo_ros" type="spawn_model"
        args="-param robot_description_slave
           -urdf
           -x $(arg x)
           -y $(arg y)
           -z $(arg z)
           -R $(arg R)
           -P $(arg P)
           -Y $(arg Y)
           -model $(arg name)"
        respawn="false" output="screen"/>

</launch>
